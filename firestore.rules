rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 開発中は全てのコレクションに対して読み書きを許可
    match /{document=**} {
      allow read, write: if true;
    }
    
    // 以下のルールは本番環境用に残しておく（コメントアウト）
    /* 
    // ユーザー認証関数
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // 自分自身のデータかどうかを確認する関数
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // 管理者かどうかを確認する関数
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // ユーザーコレクション
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // チャンネルコレクション
    match /channels/{channelId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // スレッドコレクション
    match /threads/{threadId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.authorId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }
    
    // メッセージコレクション
    match /messages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.authorId == request.auth.uid || isAdmin());
    }
    
    // 接続テスト用コレクション - すべてのユーザーに読み書き権限を付与
    match /connectionTest/{docId} {
      // 認証済みユーザーは完全なアクセス権を持つ
      allow read, write: if isAuthenticated();
      // 未認証ユーザーも接続テスト用に読み書き可能
      allow read, write: if !isAuthenticated();
    }
    */
  }
} 